name: CPQ System Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  backend-tests:
    name: Backend Tests
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: 3.11
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt', '**/test-requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      working-directory: ./apps/api
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r test-requirements.txt
    
    - name: Initialize test database
      working-directory: ./apps/api
      env:
        FLASK_ENV: testing
        JWT_SECRET_KEY: test-secret-key
      run: |
        python scripts/init_db.py
    
    - name: Run backend unit tests
      working-directory: ./apps/api
      env:
        FLASK_ENV: testing
        JWT_SECRET_KEY: test-secret-key
      run: |
        pytest tests/unit/ -v --tb=short --cov=src --cov-report=xml --cov-report=html --cov-report=term-missing --junitxml=junit.xml
    
    - name: Run backend integration tests
      working-directory: ./apps/api
      env:
        FLASK_ENV: testing
        JWT_SECRET_KEY: test-secret-key
      run: |
        pytest tests/integration/ -v --tb=short --junitxml=integration-junit.xml || echo "Integration tests completed with warnings"
    
    - name: Upload backend coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./apps/api/coverage.xml
        flags: backend
        name: backend-coverage
        fail_ci_if_error: false
    
    - name: Upload backend test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: backend-test-results
        path: |
          ./apps/api/htmlcov/
          ./apps/api/coverage.xml
          ./apps/api/junit.xml
          ./apps/api/integration-junit.xml

  frontend-tests:
    name: Frontend Tests
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Node.js 18
      uses: actions/setup-node@v4
      with:
        node-version: 18
        cache: 'npm'
        cache-dependency-path: ./apps/web/package-lock.json
    
    - name: Install frontend dependencies
      working-directory: ./apps/web
      run: |
        npm ci
    
    - name: Type check frontend
      working-directory: ./apps/web
      run: |
        npx vue-tsc --noEmit || echo "Type check completed with warnings"
    
    - name: Lint frontend
      working-directory: ./apps/web  
      run: |
        npm run lint --if-present || echo "Linting completed"
    
    - name: Run frontend unit tests
      working-directory: ./apps/web
      run: |
        npm run test -- --coverage --reporter=verbose --reporter=junit --outputFile=test-results.xml
    
    - name: Upload frontend coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./apps/web/coverage/clover.xml
        flags: frontend
        name: frontend-coverage
        fail_ci_if_error: false
    
    - name: Upload frontend test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: frontend-test-results
        path: |
          ./apps/web/coverage/
          ./apps/web/test-results.xml

  e2e-tests:
    name: E2E Tests
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: 3.11
    
    - name: Set up Node.js 18
      uses: actions/setup-node@v4
      with:
        node-version: 18
        cache: 'npm'
        cache-dependency-path: ./apps/web/package-lock.json
    
    - name: Install backend dependencies
      working-directory: ./apps/api
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Install frontend dependencies
      working-directory: ./apps/web
      run: |
        npm ci
        npx playwright install --with-deps
    
    - name: Setup test database  
      working-directory: ./apps/api
      env:
        FLASK_ENV: testing
        JWT_SECRET_KEY: test-secret-key
      run: |
        python scripts/init_db.py
    
    - name: Start backend server
      working-directory: ./apps/api
      env:
        FLASK_ENV: testing
        JWT_SECRET_KEY: test-secret-key
        PORT: 5000
      run: |
        python app.py &
        sleep 15
        curl -f http://localhost:5000/api/health || echo "Backend health check failed"
    
    - name: Start frontend server
      working-directory: ./apps/web
      env:
        VITE_API_BASE_URL: http://localhost:5000
      run: |
        npm run build
        npm run preview &
        sleep 10
    
    - name: Run E2E tests
      working-directory: ./apps/web
      env:
        PLAYWRIGHT_BASE_URL: http://localhost:4173
      run: |
        npx playwright test --reporter=html
    
    - name: Upload E2E test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: e2e-test-results
        path: |
          ./apps/web/test-results/
          ./apps/web/playwright-report/
    
    - name: Upload E2E screenshots
      uses: actions/upload-artifact@v3
      if: failure()
      with:
        name: e2e-screenshots
        path: ./apps/web/test-results/**/*.png

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Run Bandit security scan for Python
      working-directory: ./apps/api
      run: |
        pip install bandit
        bandit -r src/ -f json -o bandit-report.json || true
    
    - name: Run npm audit for Node.js
      working-directory: ./apps/web
      run: |
        npm audit --json > npm-audit.json || true
    
    - name: Upload security scan results
      uses: actions/upload-artifact@v3
      with:
        name: security-scan-results
        path: |
          ./apps/api/bandit-report.json
          ./apps/web/npm-audit.json

  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: [backend-tests]
    if: github.event_name == 'schedule' || contains(github.event.head_commit.message, '[perf-test]')
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: 3.11
    
    - name: Install dependencies
      working-directory: ./apps/api
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install locust
    
    - name: Setup performance test database
      working-directory: ./apps/api
      env:
        FLASK_ENV: production
        JWT_SECRET_KEY: test-secret-key
      run: |
        python scripts/init_db.py
    
    - name: Start backend for performance testing
      working-directory: ./apps/api
      env:
        FLASK_ENV: production
        JWT_SECRET_KEY: test-secret-key
      run: |
        python app.py &
        sleep 15
        curl -f http://localhost:5000/api/health || echo "Backend health check failed"
    
    - name: Run performance tests
      working-directory: ./apps/api
      run: |
        locust -f tests/performance/locustfile.py --host=http://localhost:5000 --users=10 --spawn-rate=2 --run-time=60s --html=performance-report.html --headless
    
    - name: Upload performance test results
      uses: actions/upload-artifact@v3
      with:
        name: performance-test-results
        path: ./apps/api/performance-report.html

  quality-gate:
    name: Quality Gate
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests, e2e-tests, security-scan]
    if: always()
    
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
      
    - name: Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.9'
    
    - name: Download all artifacts
      uses: actions/download-artifact@v3
      
    - name: Copy test results to workspace
      run: |
        # 复制测试结果到项目目录结构中
        mkdir -p apps/api apps/web/coverage
        if [ -f "backend-test-results/junit.xml" ]; then
          cp backend-test-results/junit.xml apps/api/junit.xml
        fi
        if [ -f "backend-test-results/coverage.xml" ]; then
          cp backend-test-results/coverage.xml apps/api/coverage.xml
        fi
        if [ -f "frontend-test-results/test-results.xml" ]; then
          cp frontend-test-results/test-results.xml apps/web/test-results.xml
        fi
        if [ -d "frontend-test-results/coverage" ]; then
          cp -r frontend-test-results/coverage/* apps/web/coverage/
        fi
    
    - name: Generate Test Report
      run: |
        python scripts/generate-test-report.py
        
    - name: Upload Test Report
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-report
        path: |
          test-report.html
        retention-days: 30

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [quality-gate]
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    environment: staging
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Deploy to staging environment
      run: |
        echo "Deploying to staging environment..."
        # Add your deployment script here
        # This could involve Docker builds, cloud deployments, etc.
    
    - name: Run smoke tests on staging
      run: |
        echo "Running smoke tests on staging..."
        # Add smoke test commands here

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [quality-gate]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Deploy to production environment
      run: |
        echo "Deploying to production environment..."
        # Add your production deployment script here
    
    - name: Run production health checks
      run: |
        echo "Running production health checks..."
        # Add health check commands here